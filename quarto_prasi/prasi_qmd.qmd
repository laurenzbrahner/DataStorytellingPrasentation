---
title: "Musiktrends"
subtitle: 'Was einen Song erfolgreich macht'
author: 'Laurenz Brahner'
execute:
    eval: true
    echo: false 
lang: "de"
highlight-style: github
format:
    revealjs:
        toc: true
        toc-depth: 1
        embed-resources: true
        code-copy: true
        code-line-numbers: true
        scrollable: false
        slide-number: c
        incremental: true
        transition: slide
        theme: [dark, custom_design.scss]  
        width: 2000   
        height: 960

---


# Überblick über die Daten

## Datenquelle: <span style="color: #00d9ff">**Kaggle**</span>

::: {.fragment .fade-in}
### Datensatz: <span style="color: #00d9ff">***Meistgestreamte Songs auf Spotify im Jahr 2023***</span>
::: 
<br/>

::: {.fragment .fade-in}
Dieser Datensatz bietet detaillierte Informationen zu den Top-Streaming-Songs auf Spotify im Jahr 2023: 
:::
- <span style="color: #ffc71f">**Track-Informationen**</span>: Titel, Künstler, Veröffentlichungsdatum
- <span style="color: #ffc71f">**Anzahl der Playlists und Charts**</span>: Anzahl der Playlists und Charts, in denen der Track erscheint
- <span style="color: #ffc71f">**Gesamtzahl der Streams**</span>: Gesamtanzahl der Streams pro Track
- <span style="color: #ffc71f">**Musikalische Merkmale**</span>: Tanzbarkeit, Energie, Tonart, usw.
- (<span style="color: #ffc71f">**Herkunft der Künstler**</span>: Länder, aus denen die Künstler stammen)

::: footer
Überblick über die Daten
:::



# Einführung 


##  <span class="top" style="text-align: center"> Top-Songs 2023</span>
<br/>

:::: {.columns}

::: {.column width="30%"}






1. <span style="color: #fde725">Blidning Lights (3.7 Mrd)</span>
2. <span style="color: #abdc32">Shape of You (3.6 Mrd.) </span>
3. <span style="color: #375b8c"> Someone You Loved (2.9 Mrd.)</span>


:::

::: {.column width="70%"}


```{python}
#


import altair as alt
import pandas as pd


df = pd.read_csv('spotify_angereichert_cleaned.csv')


df.drop(['Unnamed: 0'], axis=1, inplace=True)


# Griupieren nach Künstler und Summieren der Streams


df_top10_songs = df.sort_values(by='streams', ascending=False).head(10)

# only show track name and streams

df_top10_songs = df_top10_songs[['track_name', 'streams', 'artist(s)_name']]


# sort after the most streamed artists

df_top_artist = df.groupby('artist(s)_name')[
    'streams'].sum().sort_values(ascending=False)

# Anzeigen der Top-Künstler basierend auf Streams
top_artists_streams = df_top_artist.head(10)

top_artists_streams_3 = df_top_artist.head(3)


df_top10_songs['is_top_3'] = df_top10_songs['streams'].rank(
    ascending=False) <= 3


title_color = "rgba(230, 230, 230, 0.7)"
axis_title_y = "rgba(230, 230, 230, 0.5)"  # Weiß mit 90% Deckkraft
axis_title_color = "rgba(224, 224, 224, 0.3)"  # Helles Grau mit 80% Deckkraft

top_artists_streams_chart = alt.Chart(df_top10_songs).mark_bar(size=45).encode(
    y=alt.Y('track_name:N', sort='-x',
            axis=alt.Axis(title='Songtitel', labelFontSize=18, labelColor=axis_title_y, titleColor=axis_title_color, titleFontSize=35)),
    x=alt.X('streams:Q', axis=alt.Axis(title='Streams (Milliarden)', titleFontSize=35,
            labelFontSize=22, format='.0s', tickCount=5, tickMinStep=1e9, labelExpr='datum.value / 1e9', labelColor=axis_title_color, titleColor=axis_title_color)),
    color=alt.Color('streams:Q', scale=alt.Scale(
        scheme='viridis'), legend=None),
    tooltip=[
        alt.Tooltip('track_name:N', title='Songtitel'),
        alt.Tooltip('streams:Q', title='Anzahl der Streams'),
        alt.Tooltip('artist(s)_name:N', title='Künstlername')
    ]
).properties(
    title={'text': 'Top 10 Songs nach Streams 2023', 'color': title_color},
    width=1000,
    height=600,
    background='#191919'
).configure_title(
    fontSize=45,
    anchor='start'
).configure_axis(
    grid=False,
    titlePadding=20
).configure_view(
    strokeWidth=0,
    continuousWidth=1000,
    continuousHeight=600
).configure_axisX(
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='middle',
    titleFontSize=20
)


top_artists_streams_chart



```

:::

::::


::: footer

Einführung 

:::



## Top-Künstler 2023

:::: {.columns}

::: {.column width="30%"}






1. <span style="color: #fde725">Ed Sheeran (14 Mrd)</span>
2. <span style="color: #6ccd59">Taylor Swift (12 Mrd.) </span>
3. <span style="color: #20a486">The Weeknd (10 Mrd.)</span>


::: {.fragment .fade-in}
<br/>
<br/>

<div style="font-size: 50px"> ***Was hat diese Songs und diese Künstler so Erfolgreich gemacht?***
Gibt es eine <span style="color: #ff3c00">**Geheimformel?**</span>
 </div> 

:::


:::

::: {.column width="70%"}

```{python}

artist_streams = df.groupby('artist(s)_name')[
    'streams'].sum().sort_values(ascending=False)

# Anzeigen der Top-Künstler basierend auf Streams
top_artists_streams = artist_streams.head(10)


top_artists_streams_chart = alt.Chart(top_artists_streams.reset_index()).mark_bar().encode(
    x=alt.X('artist(s)_name', sort='-y',
            axis=alt.Axis(title='Künstler', labelFontSize=20)),
    y=alt.Y('streams',   axis=alt.Axis(title='Streams (Milliarden)', titleFontSize=35,
            labelFontSize=22, format='.0s', tickCount=5, tickMinStep=1e9, labelExpr='datum.value / 1e9')),
    color=alt.Color('streams', scale=alt.Scale(scheme='viridis'), legend=None),
    tooltip=['artist(s)_name', 'streams']
).properties(
    title={'text': 'Top 10 Künstler nach Streams',
           'dy': -20, 'color': title_color},
    background='#191919',
    width=1000,
    height=600
).configure_title(
    fontSize=45,
    anchor='start'
).configure_axis(
    titleFontSize=35,
    titleColor=axis_title_color,
    labelColor=axis_title_color,
    titlePadding=12,
    grid=False
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=-45,
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='end'
)
top_artists_streams_chart


```

:::
::::

::: footer

Einführung 

:::

# Einfluss der Tonart und des Keys

## Major vs Minor

:::: {.columns}

::: {.column width="30%"}



<br/>
<br/>



- <span style="color: #4ee2e6; font-size: 60px;">Major:</span> <br/>
    helle und frögliche Klangqualität


- <span style="color: #a5ff9e; font-size: 60px;">Minor:</span><br/>
    melancholische und düstere Stimmung


:::

::: {.column width="70%"}

```{python}

mode_streams = df.groupby('mode')['streams'].mean()


mode_streams_df = mode_streams.reset_index()

mode_song_count = df.groupby('mode').size().reset_index(name='song_count')


chart_mode_bar = alt.Chart(mode_song_count).mark_bar(clip=True, size=80).encode(
    x=alt.X('mode', axis=alt.Axis(title='Tonart',
            labelFontSize=20,  titleFontSize=35)),
    y=alt.Y('song_count', scale=alt.Scale(domain=[250, 450]), axis=alt.Axis(title='Anzahl der Songs', titleFontSize=35,
                                                                            labelFontSize=20, tickCount=4, tickMinStep=50)),
    color=alt.Color('mode', legend=None, scale=alt.Scale(
        range=['#4ee2e6', '#a5ff9e'])),

    tooltip=[
        alt.Tooltip('mode', title='Tonart'),
        alt.Tooltip('song_count', title='Anzahl der Songs')
    ]
).properties(
    title={'text': 'Anzahl der Top-Songs nach Tonart',  'dy': -20},
    width=1000,
    height=600,
    background='#191919',
).configure_title(
    fontSize=45,
    anchor='start',
    color=title_color
).configure_axis(
    labelFontSize=14,
    titleFontSize=20,
    titleColor=axis_title_color,
    labelColor='gray',
    titlePadding=12,
    grid=False
).configure_legend(
    titleFontSize=16,
    labelFontSize=14
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=0,
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='end',
    titleFontSize=20
)

chart_mode_bar
```
:::
::::

::: footer
Einfluss der Tonart und des Keys
:::

## Major vs Minor

:::: {.columns}

::: {.column width="30%"}

<br/>



- <span style="color: #4ee2e6">Deutlich mehr Top-Songs haben die Tonart Major und sind damit eher fröhlich </span> <br/>


     

:::
::: {.column width="70%"}


```{python}

import altair as alt

# ...

# Finde den größten Wert in der 'streams'-Spalte
max_streams = mode_song_count['song_count'].max()


# Erstelle das Balkendiagramm
chart_mode_bar = alt.Chart(mode_song_count).mark_bar(clip=True, size=80).encode(
    x=alt.X('mode', axis=alt.Axis(title='Tonart',
            labelFontSize=20,  titleFontSize=35)),
    y=alt.Y('song_count', scale=alt.Scale(domain=[250, 450]), axis=alt.Axis(title='Anzahl der Songs', titleFontSize=35,
                                                                            labelFontSize=20, tickCount=5, tickMinStep=50)),
    color=alt.Color('mode', legend=None, scale=alt.Scale(
        range=['#4ee2e6', '#a5ff9e'])),

    tooltip=[
        alt.Tooltip('mode', title='Tonart'),
        alt.Tooltip('song_count', title='Ø Streams')
    ]
)

# Erstelle eine Linie über dem größten Balken
highlighted_line = alt.Chart(pd.DataFrame({'max_streams': [max_streams]})).mark_rule(color='red', strokeWidth=4).encode(
    y='max_streams:Q'
)

final_chart = alt.layer(chart_mode_bar,  highlighted_line).properties(
    title={'text': 'Anzahl der Top-Songs nach Tonart',  'dy': -20},
    width=1000,
    height=600,
    background='#191919',
).configure_title(
    fontSize=45,
    anchor='start',
    color=title_color
).configure_axis(
    labelFontSize=14,
    titleFontSize=20,
    titleColor=axis_title_color,
    labelColor='gray',
    titlePadding=12,
    grid=False
).configure_legend(
    titleFontSize=16,
    labelFontSize=14
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=0,
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='end',
    titleFontSize=20
)

final_chart



```

::: footer
Einfluss der Tonart und des Keys
:::

:::
::::

## Der Einfluss des Keys 


:::: {.columns}

::: {.column width="30%"}
<br/>

::: {.fragment .fade-in}
***"Keys"*** sind die musikalischen Bausteine, die bestimmen, wie die Musik klingt und sich anhört.
:::
     

:::
::: {.column width="70%"}



```{python}

key_streams = df.groupby('key')['streams'].mean()


key_streams_df = key_streams.reset_index()





key_streams_chart = alt.Chart(key_streams_df).mark_bar(clip=True).encode(
    x=alt.X('key',  axis=alt.Axis(title='Key')),
    y=alt.Y('streams', scale=alt.Scale(domain=[400000000, 650000000]), axis=alt.Axis(title='Ø Streams (Millionen)',
                                                                                     format='.0s', tickCount=5, tickMinStep=1e9, labelExpr='datum.value / 1e6')),
    color=alt.Color('key', legend=None,),
    tooltip=['key', 'streams']
).properties(
    title={'text': 'Durchschnittliche Streams nach Key', 'dy': -20},
    background='#191919',
    width=1000,
    height=600
).configure_title(
    fontSize=45,
    color=title_color,
    anchor='start'
).configure_axis(
    labelFontSize=22,
    titleFontSize=32,
    titleColor=axis_title_color,
    labelColor=axis_title_y,
    titlePadding=12,
    grid=False
).configure_legend(
    titleFontSize=16,
    labelFontSize=14
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=0,
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='end'
)

key_streams_chart

```

:::
::::

::: footer
Einfluss der Tonart und des Keys
:::

## Der Einfluss des Keys


:::: {.columns}

::: {.column width="30%"}
<br/>


- Songs mit dem Key <span style="color: red">***C#***</span> Haben im Durchschnitt die **meisten** Streams 
- Songs mit dem Key ***A*** Haben im Durchschnitt die **wenigsten** Streams 


     

:::
::: {.column width="70%"}

```{python}


max_streams_key = key_streams_df['streams'].max()

min_streams_key = key_streams_df['streams'].min()


# Erstelle das Balkendiagramm
chart_mode_bar = alt.Chart(key_streams_df).mark_bar(clip=True, size=80, opacity=0.3).encode(
    x=alt.X('key', axis=alt.Axis(title='Tonart')),
    y=alt.Y('streams', scale=alt.Scale(domain=[400000000, 650000000]), axis=alt.Axis(title='Ø Streams (Millionen)',
                                                                                     format='.0s', tickCount=5, tickMinStep=1e9, labelExpr='datum.value / 1e6')),
    color=alt.Color('key', legend=None),

    tooltip=[
        alt.Tooltip('key', title='Tonart'),
        alt.Tooltip('streams', title='Ø Streams')
    ]
)

# Erstelle eine Linie über dem größten Balken
highlighted_line_max = alt.Chart(pd.DataFrame({'max_streams': [max_streams_key]})).mark_rule(color='red', strokeWidth=4).encode(
    y='max_streams:Q'
)

highlighted_line_min = alt.Chart(pd.DataFrame({'min_streams': [min_streams_key]})).mark_rule(color='white', strokeDash=[12, 11], strokeWidth=2, opacity=0.5).encode(
    y='min_streams:Q'
)


final_chart = alt.layer(chart_mode_bar,  highlighted_line_max, highlighted_line_min).properties(
    title={'text': 'Durchschnittliche Streams nach Key',  'dy': -20},
    width=1000,
    height=600,
    background='#191919',
).configure_title(
    fontSize=45,
    anchor='start',
    color=title_color
).configure_axis(
    labelFontSize=20,
    titleFontSize=35,
    titleColor=axis_title_color,
    labelColor='gray',
    titlePadding=12,
    grid=False
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=0,
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='end'
)

final_chart


```

:::
::::

::: footer
Einfluss der Tonart und des Keys
:::

# Der beste Zeitpunkt für einen Song-Release

## Releasezeitpunkt der Top-Songs

:::: {.columns}

::: {.column width="10%"}



     

:::
::: {.column width="90%"}

```{python}

monthly_releases = df.groupby(
    'released_month').size().reset_index(name='count')

month_labels = {
    1: 'Jan',
    2: 'Feb',
    3: 'Mar',
    4: 'Apr',
    5: 'May',
    6: 'Jun',
    7: 'Jul',
    8: 'Aug',
    9: 'Sep',
    10: 'Oct',
    11: 'Nov',
    12: 'Dec'
}

monthly_releases['released_month'] = monthly_releases['released_month'].map(
    month_labels)


def base_chart(df):
    chart = monthly_releases_chart = alt.Chart(df).mark_line(strokeWidth=3).encode(
        x=alt.X('released_month', axis=alt.Axis(title='Monat'),
                sort=list(month_labels.values())),
        y=alt.Y('count', scale=alt.Scale(domain=(30, 120)), axis=alt.Axis(
            title='Veröffentlichungen')),
        tooltip=['released_month', 'count']
    )
    return chart


max_points = monthly_releases[monthly_releases['count']
                              == monthly_releases['count'].max()]
min_points = monthly_releases[monthly_releases['count']
                              == monthly_releases['count'].min()]

min_points_chart = base_chart(min_points).mark_point(size=200, color='white')
max_points_chart = base_chart(max_points).mark_point(size=200, color='red')
min_points_chart_line = alt.Chart().mark_rule(strokeDash=[12, 6], size=4, color='white', fontSize=12, opacity=0.6).encode(
    y=alt.datum(39),
    x=alt.datum("Aug")
)
max_points_chart_line_jan = alt.Chart().mark_rule(strokeDash=[12, 6], size=4, color='red', fontSize=12, opacity=0.6).encode(
    y=alt.datum(112),
    x=alt.datum("Jan")
)
max_points_chart_line_may = alt.Chart().mark_rule(strokeDash=[12, 6], size=4, color='red', fontSize=12, opacity=0.6).encode(
    y=alt.datum(112),
    x=alt.datum("May")
)

detailed_chart_release = alt.layer(min_points_chart_line+max_points_chart_line_jan + max_points_chart_line_may + min_points_chart + max_points_chart + base_chart(monthly_releases)).properties(
    title={'text': 'Anzahl der Songveröffentlichungen pro Monat', 'dy': -20},
    background='#191919',
    width=1000,
    height=600
).configure_title(
    fontSize=45,
    anchor='start',
    color=title_color
).configure_axis(
    labelFontSize=20,
    titleFontSize=35,
    titleColor=axis_title_color,
    labelColor=axis_title_y,
    titlePadding=12
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=0,
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='end'
)


base_chart_release = alt.layer(base_chart(monthly_releases)).properties(
    # title={'text': 'Anzahl der Songveröffentlichungen nach Monat', 'dy': -20},
    background='#191919',
    width=1500,
    height=600
).configure_title(
    fontSize=45,
    anchor='start',
    color=title_color
).configure_axis(
    labelFontSize=20,
    titleFontSize=35,
    titleColor=axis_title_color,
    labelColor=axis_title_y,
    titlePadding=12
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=0,
    titleAnchor='start'
).configure_axisY(
    grid=False,
    titleAnchor='end'
)

base_chart_release


```

:::
::::

::: footer 
Der beste Zeitpunkt für einen Song-Release
:::

## Der beste Zeitpunkt für einen Song-Release

:::: {.columns}

::: {.column width="30%"}

<br/>

- Die <u>**meisten**</u> Top-Songs werden im <span style="color: red">***Januar***</span> und im <span style="color: red">***Mai***</span> veröffentlicht.

<br/>
<br/>

- die <u>**wenigsten**</u> Top-Songs werden im ***August*** veröffentlicht.
     

:::
::: {.column width="70%"}

```{python}

detailed_chart_release

```

::: 
::::

::: footer 
Der beste Zeitpunkt für einen Song-Release
:::